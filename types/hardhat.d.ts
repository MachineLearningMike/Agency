/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";
import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "Keep3r",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3r__factory>;
    getContractFactory(
      name: "Keep3rHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rHelper__factory>;
    getContractFactory(
      name: "DustCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DustCollector__factory>;
    getContractFactory(
      name: "Governable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: "Keep3rJobDisputable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobDisputable__factory>;
    getContractFactory(
      name: "Keep3rJobFundableCredits",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobFundableCredits__factory>;
    getContractFactory(
      name: "Keep3rJobFundableLiquidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobFundableLiquidity__factory>;
    getContractFactory(
      name: "Keep3rJobManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobManager__factory>;
    getContractFactory(
      name: "Keep3rJobMigration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobMigration__factory>;
    getContractFactory(
      name: "Keep3rJobOwnership",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobOwnership__factory>;
    getContractFactory(
      name: "Keep3rJobs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobs__factory>;
    getContractFactory(
      name: "Keep3rJobWorkable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobWorkable__factory>;
    getContractFactory(
      name: "Keep3rAccountance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rAccountance__factory>;
    getContractFactory(
      name: "Keep3rDisputable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rDisputable__factory>;
    getContractFactory(
      name: "Keep3rParameters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rParameters__factory>;
    getContractFactory(
      name: "Keep3rRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rRoles__factory>;
    getContractFactory(
      name: "Keep3rKeeperDisputable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rKeeperDisputable__factory>;
    getContractFactory(
      name: "Keep3rKeeperFundable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rKeeperFundable__factory>;
    getContractFactory(
      name: "Keep3rKeepers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rKeepers__factory>;
    getContractFactory(
      name: "UniV3PairManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3PairManager__factory>;
    getContractFactory(
      name: "UniV3PairManagerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3PairManagerFactory__factory>;
    getContractFactory(
      name: "ERC20ForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ForTest__factory>;
    getContractFactory(
      name: "IUniswapV3PoolForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolForTest__factory>;
    getContractFactory(
      name: "JobForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JobForTest__factory>;
    getContractFactory(
      name: "Keep3rForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rForTest__factory>;
    getContractFactory(
      name: "Keep3rHelperForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rHelperForTest__factory>;
    getContractFactory(
      name: "LiquidityAmountsForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityAmountsForTest__factory>;
    getContractFactory(
      name: "DustCollectorForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DustCollectorForTest__factory>;
    getContractFactory(
      name: "GovernableForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernableForTest__factory>;
    getContractFactory(
      name: "Keep3rJobDisputableForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobDisputableForTest__factory>;
    getContractFactory(
      name: "Keep3rJobFundableCreditsForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobFundableCreditsForTest__factory>;
    getContractFactory(
      name: "Keep3rJobFundableLiquidityForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobFundableLiquidityForTest__factory>;
    getContractFactory(
      name: "Keep3rJobManagerForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobManagerForTest__factory>;
    getContractFactory(
      name: "Keep3rJobMigrationForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobMigrationForTest__factory>;
    getContractFactory(
      name: "Keep3rJobOwnershipForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobOwnershipForTest__factory>;
    getContractFactory(
      name: "Keep3rJobWorkableForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rJobWorkableForTest__factory>;
    getContractFactory(
      name: "Keep3rAccountanceForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rAccountanceForTest__factory>;
    getContractFactory(
      name: "Keep3rDisputableForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rDisputableForTest__factory>;
    getContractFactory(
      name: "Keep3rParametersForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rParametersForTest__factory>;
    getContractFactory(
      name: "Keep3rKeeperDisputableForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rKeeperDisputableForTest__factory>;
    getContractFactory(
      name: "Keep3rKeeperFundableForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keep3rKeeperFundableForTest__factory>;
    getContractFactory(
      name: "UniV3PairManagerForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3PairManagerForTest__factory>;
    getContractFactory(
      name: "ProxyForTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyForTest__factory>;
    getContractFactory(
      name: "IKeep3rV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rV1__factory>;
    getContractFactory(
      name: "IKeep3rV1Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rV1Proxy__factory>;
    getContractFactory(
      name: "IWeth9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeth9__factory>;
    getContractFactory(
      name: "IKeep3r",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3r__factory>;
    getContractFactory(
      name: "IKeep3rHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rHelper__factory>;
    getContractFactory(
      name: "IPairManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPairManager__factory>;
    getContractFactory(
      name: "IPairManagerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPairManagerFactory__factory>;
    getContractFactory(
      name: "IUniV3PairManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniV3PairManager__factory>;
    getContractFactory(
      name: "IBaseErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseErrors__factory>;
    getContractFactory(
      name: "IDustCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDustCollector__factory>;
    getContractFactory(
      name: "IGovernable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernable__factory>;
    getContractFactory(
      name: "IKeep3rAccountance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rAccountance__factory>;
    getContractFactory(
      name: "IKeep3rDisputable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rDisputable__factory>;
    getContractFactory(
      name: "IKeep3rJobDisputable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobDisputable__factory>;
    getContractFactory(
      name: "IKeep3rJobFundableCredits",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobFundableCredits__factory>;
    getContractFactory(
      name: "IKeep3rJobFundableLiquidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobFundableLiquidity__factory>;
    getContractFactory(
      name: "IKeep3rJobManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobManager__factory>;
    getContractFactory(
      name: "IKeep3rJobMigration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobMigration__factory>;
    getContractFactory(
      name: "IKeep3rJobOwnership",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobOwnership__factory>;
    getContractFactory(
      name: "IKeep3rJobs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobs__factory>;
    getContractFactory(
      name: "IKeep3rJobWorkable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rJobWorkable__factory>;
    getContractFactory(
      name: "IKeep3rKeeperDisputable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rKeeperDisputable__factory>;
    getContractFactory(
      name: "IKeep3rKeeperFundable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rKeeperFundable__factory>;
    getContractFactory(
      name: "IKeep3rKeepers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rKeepers__factory>;
    getContractFactory(
      name: "IKeep3rParameters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rParameters__factory>;
    getContractFactory(
      name: "IKeep3rRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeep3rRoles__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}

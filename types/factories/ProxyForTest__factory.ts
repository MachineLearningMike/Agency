/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { ProxyForTest, ProxyForTestInterface } from "../ProxyForTest";

const _abi = [
  {
    inputs: [],
    name: "CallError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "call",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061021f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631b8b921d14610030575b600080fd5b61004361003e3660046100c8565b610045565b005b6000826001600160a01b03168260405161005f9190610198565b6000604051808303816000865af19150503d806000811461009c576040519150601f19603f3d011682016040523d82523d6000602084013e6100a1565b606091505b50509050806100c357604051630d93a8fd60e31b815260040160405180910390fd5b505050565b600080604083850312156100db57600080fd5b82356001600160a01b03811681146100f257600080fd5b9150602083013567ffffffffffffffff8082111561010f57600080fd5b818501915085601f83011261012357600080fd5b813581811115610135576101356101d3565b604051601f8201601f19908116603f0116810190838211818310171561015d5761015d6101d3565b8160405282815288602084870101111561017657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b818110156101b9576020818601810151858301520161019f565b818111156101c8576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220db3d5e5aa459c982cf23e87698f3d7159872f024ef29f06a6d79a008176cc67b64736f6c63430008070033";

export class ProxyForTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProxyForTest> {
    return super.deploy(overrides || {}) as Promise<ProxyForTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ProxyForTest {
    return super.attach(address) as ProxyForTest;
  }
  connect(signer: Signer): ProxyForTest__factory {
    return super.connect(signer) as ProxyForTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyForTestInterface {
    return new utils.Interface(_abi) as ProxyForTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyForTest {
    return new Contract(address, _abi, signerOrProvider) as ProxyForTest;
  }
}

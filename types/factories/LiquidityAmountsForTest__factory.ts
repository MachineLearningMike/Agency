/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
  LiquidityAmountsForTest,
  LiquidityAmountsForTestInterface,
} from "../LiquidityAmountsForTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmount0ForLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmount1ForLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmountsForLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
    ],
    name: "getLiquidityForAmount0",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "getLiquidityForAmount1",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "getLiquidityForAmounts",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061068e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806308c0f7951461006757806329e24cb7146100975780636098fd4a146100b857806367df6e89146100cb5780636ac69a8e146100de578063c72e160b146100f1575b600080fd5b61007a6100753660046105c4565b610119565b6040516001600160801b0390911681526020015b60405180910390f35b6100aa6100a53660046104d8565b61016c565b60405190815260200161008e565b61007a6100c636600461056f565b6101b6565b61007a6100d93660046105c4565b61027a565b6100aa6100ec3660046104d8565b6102d1565b6101046100ff36600461051b565b610344565b6040805192835260208301919091520161008e565b6000826001600160a01b0316846001600160a01b03161115610139579192915b61016261015d83600160601b61014f8888610622565b6001600160a01b03166103e0565b61048f565b90505b9392505050565b6000826001600160a01b0316846001600160a01b0316111561018c579192915b6101626001600160801b0383166101a38686610622565b6001600160a01b0316600160601b6103e0565b6000836001600160a01b0316856001600160a01b031611156101d6579293925b846001600160a01b0316866001600160a01b031611610201576101fa85858561027a565b9050610271565b836001600160a01b0316866001600160a01b0316101561026357600061022887868661027a565b90506000610237878986610119565b9050806001600160801b0316826001600160801b031610610258578061025a565b815b92505050610271565b61026e858584610119565b90505b95945050505050565b6000826001600160a01b0316846001600160a01b0316111561029a579192915b60006102bd856001600160a01b0316856001600160a01b0316600160601b6103e0565b905061027161015d848361014f8989610622565b6000826001600160a01b0316846001600160a01b031611156102f1579192915b6001600160a01b03841661033a6fffffffffffffffffffffffffffffffff60601b606085901b166103228787610622565b6001600160a01b0316866001600160a01b03166103e0565b6101629190610600565b600080836001600160a01b0316856001600160a01b03161115610365579293925b846001600160a01b0316866001600160a01b031611610390576103898585856102d1565b91506103d7565b836001600160a01b0316866001600160a01b031610156103c9576103b58685856102d1565b91506103c285878561016c565b90506103d7565b6103d485858561016c565b90505b94509492505050565b60008080600019858709858702925082811083820303915050806000141561041a576000841161040f57600080fd5b508290049050610165565b80841161042657600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b806001600160801b03811681146104a557600080fd5b919050565b80356001600160801b03811681146104a557600080fd5b80356001600160a01b03811681146104a557600080fd5b6000806000606084860312156104ed57600080fd5b6104f6846104c1565b9250610504602085016104c1565b9150610512604085016104aa565b90509250925092565b6000806000806080858703121561053157600080fd5b61053a856104c1565b9350610548602086016104c1565b9250610556604086016104c1565b9150610564606086016104aa565b905092959194509250565b600080600080600060a0868803121561058757600080fd5b610590866104c1565b945061059e602087016104c1565b93506105ac604087016104c1565b94979396509394606081013594506080013592915050565b6000806000606084860312156105d957600080fd5b6105e2846104c1565b92506105f0602085016104c1565b9150604084013590509250925092565b60008261061d57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b038381169083168181101561065057634e487b7160e01b600052601160045260246000fd5b03939250505056fea2646970667358221220fcb78e92c08a99819991ad3bd29134adfea3051d458d3058ead33444797233be64736f6c63430008070033";

export class LiquidityAmountsForTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityAmountsForTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityAmountsForTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityAmountsForTest {
    return super.attach(address) as LiquidityAmountsForTest;
  }
  connect(signer: Signer): LiquidityAmountsForTest__factory {
    return super.connect(signer) as LiquidityAmountsForTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityAmountsForTestInterface {
    return new utils.Interface(_abi) as LiquidityAmountsForTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityAmountsForTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityAmountsForTest;
  }
}
